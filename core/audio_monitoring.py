import pyaudio
import speech_recognition as sr
import threading
import time

# ================= CONFIG =================
CHUNK = 1024  # K√≠ch th∆∞·ªõc m·ªói kh·ªëi √¢m thanh
FORMAT = pyaudio.paInt16  # ƒê·ªãnh d·∫°ng √¢m thanh
CHANNELS = 1  # S·ªë k√™nh √¢m thanh
RATE = 16000  # T·ªëc ƒë·ªô l·∫•y m·∫´u (Hz)

FORBIDDEN_KEYWORDS = [
    "ƒë√°p √°n", "quay c√≥p", "gian l·∫≠n", "t√†i li·ªáu", "tr·ª£ gi√∫p",
    "c√¢u h·ªèi", "b√†i l√†m", "k·∫øt qu·∫£"
] # T·ª´ kh√≥a c·∫•m

class AudioMonitor:
    def __init__(self):
        self.p = pyaudio.PyAudio()
        self.stream = None
        self.recognizer = sr.Recognizer()
        self.audio_thread = None
        self.running = False
        self.speech_detected_callback = None
        self.keyword_detected_callback = None

    def start_monitoring(self, speech_callback=None, keyword_callback=None):
        if self.running:
            print("Audio monitoring already running.")
            return
        
        self.speech_detected_callback = speech_callback
        self.keyword_detected_callback = keyword_callback

        try:
            self.stream = self.p.open(format=FORMAT,
                                      channels=CHANNELS,
                                      rate=RATE,
                                      input=True,
                                      frames_per_buffer=CHUNK)
            self.running = True
            self.audio_thread = threading.Thread(target=self._audio_loop, daemon=True)
            self.audio_thread.start()
            print("‚úì B·∫Øt ƒë·∫ßu gi√°m s√°t √¢m thanh.")
        except Exception as e:
            print(f"‚úó L·ªói khi kh·ªüi ƒë·ªông gi√°m s√°t √¢m thanh: {e}")
            self.running = False

    def stop_monitoring(self):
        if self.running:
            self.running = False
            if self.audio_thread and self.audio_thread.is_alive():
                self.audio_thread.join(timeout=2)  # Ch·ªù thread k·∫øt th√∫c
            if self.stream:
                self.stream.stop_stream()
                self.stream.close()
            print("‚úì ƒê√£ d·ª´ng gi√°m s√°t √¢m thanh.")

    def _audio_loop(self):
        while self.running:
            try:
                data = self.stream.read(CHUNK, exception_on_overflow=False)
                audio_data = sr.AudioData(data, RATE, 2) # 2 bytes per sample (paInt16)

                try:
                    text = self.recognizer.recognize_google(audio_data, language="vi-VN")
                    if text:
                        print(f"üé§ Ph√°t hi·ªán ti·∫øng n√≥i: \"{text}\"")
                        if self.speech_detected_callback:
                            self.speech_detected_callback(text)

                        for keyword in FORBIDDEN_KEYWORDS:
                            if keyword in text.lower():
                                print(f"üö® Ph√°t hi·ªán t·ª´ kh√≥a c·∫•m: \"{keyword}\" trong \"{text}\"")
                                if self.keyword_detected_callback:
                                    self.keyword_detected_callback(keyword, text)
                                break

                except sr.UnknownValueError:
                    pass # Kh√¥ng ph√°t hi·ªán ti·∫øng n√≥i
                except sr.RequestError as e:
                    # L·ªói API c·ªßa Google Speech Recognition (v√≠ d·ª•: kh√¥ng c√≥ m·∫°ng)
                    print(f"‚úó L·ªói Speech Recognition: {e}")
                    time.sleep(1) # Ch·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i

            except Exception as e:
                print(f"‚úó L·ªói trong v√≤ng l·∫∑p ghi √¢m: {e}")
                self.running = False # D·ª´ng gi√°m s√°t n·∫øu c√≥ l·ªói nghi√™m tr·ªçng

    def __del__(self):
        self.stop_monitoring()
        self.p.terminate()

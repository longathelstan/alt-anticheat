import subprocess
import re
import socket
import threading
from dnslib import DNSRecord, RR, A, QTYPE # C·∫ßn c√†i ƒë·∫∑t dnslib: pip install dnslib

# ================= CONFIG =================
# ƒê∆∞·ªùng d·∫´n t·ªõi whitelist cho DNS (v√≠ d·ª•: c√°c domain ƒë∆∞·ª£c ph√©p truy c·∫≠p)
DNS_WHITELIST_PATH = "config/dns_whitelist.txt"
WHITELISTED_DOMAINS = []

def load_dns_whitelist():
    global WHITELISTED_DOMAINS
    try:
        with open(DNS_WHITELIST_PATH, "r") as f:
            WHITELISTED_DOMAINS = [line.strip().lower() for line in f if line.strip() and not line.startswith('#')]
        print(f"‚úì ƒê√£ t·∫£i DNS Whitelist: {WHITELISTED_DOMAINS}")
    except FileNotFoundError:
        print(f"‚úó Kh√¥ng t√¨m th·∫•y t·ªáp DNS Whitelist: {DNS_WHITELIST_PATH}. T·∫•t c·∫£ DNS s·∫Ω b·ªã ch·∫∑n.")
        WHITELISTED_DOMAINS = [] # N·∫øu kh√¥ng t√¨m th·∫•y whitelist, ch·∫∑n t·∫•t c·∫£
    except Exception as e:
        print(f"‚úó L·ªói khi t·∫£i DNS Whitelist: {e}. T·∫•t c·∫£ DNS s·∫Ω b·ªã ch·∫∑n.")
        WHITELISTED_DOMAINS = []

# ================= DNS SERVER =================
DNS_SERVER_IP = "127.0.0.1"
DNS_SERVER_PORT = 53
dns_server_socket = None
dns_server_thread = None
dns_server_running = False

def handle_dns_request(data, addr, sock):
    try:
        request = DNSRecord.parse(data)
        qname = str(request.q.qname).lower().rstrip('.')
        
        response = DNSRecord(request.header)
        response.add_question(request.q)

        is_whitelisted = False
        for domain in WHITELISTED_DOMAINS:
            if qname == domain or qname.endswith('.' + domain):
                is_whitelisted = True
                break

        if is_whitelisted:
            # Chuy·ªÉn ti·∫øp y√™u c·∫ßu ƒë·∫øn m·ªôt DNS c√¥ng c·ªông (v√≠ d·ª•: Google DNS)
            # Ho·∫∑c, n·∫øu b·∫°n mu·ªën ch·∫∑n lu√¥n nh∆∞ng cho ph√©p m·ªôt s·ªë IP c·ª• th·ªÉ (√≠t d√πng cho whitelist DNS)
            try:
                # S·ª≠ d·ª•ng DNS c·ªßa Google ƒë·ªÉ ph√¢n gi·∫£i cho c√°c domain trong whitelist
                upstream_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                upstream_sock.settimeout(2)
                upstream_sock.sendto(data, ("8.8.8.8", 53)) # Google Public DNS
                upstream_response, _ = upstream_sock.recvfrom(512)
                sock.sendto(upstream_response, addr)
            except Exception as e:
                print(f"‚úó L·ªói khi chuy·ªÉn ti·∫øp DNS cho {qname}: {e}")
                # Tr·∫£ v·ªÅ NXDOMAIN n·∫øu chuy·ªÉn ti·∫øp th·∫•t b·∫°i
                response.header.ra = 1
                response.header.rcode = QTYPE.NXDOMAIN
                sock.sendto(response.pack(), addr)
            finally:
                if upstream_sock:
                    upstream_sock.close()
        else:
            # Ch·∫∑n: Tr·∫£ v·ªÅ NXDOMAIN (t√™n mi·ªÅn kh√¥ng t·ªìn t·∫°i)
            print(f"üö´ Ch·∫∑n truy v·∫•n DNS cho: {qname} (kh√¥ng c√≥ trong whitelist)")
            response.header.ra = 1
            response.header.rcode = QTYPE.NXDOMAIN
            sock.sendto(response.pack(), addr)

    except Exception as e:
        print(f"‚úó L·ªói x·ª≠ l√Ω DNS request t·ª´ {addr}: {e}")

def dns_server_loop():
    global dns_server_socket, dns_server_running
    load_dns_whitelist()
    try:
        dns_server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        dns_server_socket.bind((DNS_SERVER_IP, DNS_SERVER_PORT))
        dns_server_socket.settimeout(1) # Timeout ƒë·ªÉ c√≥ th·ªÉ ki·ªÉm tra dns_server_running
        print(f"‚úì DNS Server ƒëang ch·∫°y tr√™n {DNS_SERVER_IP}:{DNS_SERVER_PORT}")
        dns_server_running = True
        while dns_server_running:
            try:
                data, addr = dns_server_socket.recvfrom(512)
                threading.Thread(target=handle_dns_request, args=(data, addr, dns_server_socket)).start()
            except socket.timeout:
                pass # Ti·∫øp t·ª•c v√≤ng l·∫∑p n·∫øu timeout
            except Exception as e:
                print(f"‚úó L·ªói trong v√≤ng l·∫∑p DNS server: {e}")
    except Exception as e:
        print(f"‚úó Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông DNS Server tr√™n {DNS_SERVER_IP}:{DNS_SERVER_PORT}: {e}")
        dns_server_running = False
    finally:
        if dns_server_socket:
            dns_server_socket.close()
            print("‚úì DNS Server ƒë√£ d·ª´ng.")

def start_dns_server():
    global dns_server_thread
    if not dns_server_running:
        dns_server_thread = threading.Thread(target=dns_server_loop, daemon=True)
        dns_server_thread.start()
        # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ server c√≥ th·ªÉ kh·ªüi ƒë·ªông
        import time
        time.sleep(0.5)

def stop_dns_server():
    global dns_server_running
    if dns_server_running:
        dns_server_running = False
        # thread s·∫Ω t·ª± ƒë√≥ng socket khi v√≤ng l·∫∑p k·∫øt th√∫c
        print("ƒêang y√™u c·∫ßu d·ª´ng DNS Server...")

# ================= NETSH COMMANDS =================
def run_netsh_command(command_parts):
    try:
        result = subprocess.run(command_parts, check=True, capture_output=True, text=True, shell=True)
        print(f"‚úì netsh output: {command_parts[2]} {command_parts[3]} succeeded") # R√∫t g·ªçn output
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó L·ªói netsh: {e.cmd}")
        print(f"  Stdout: {e.stdout.strip()}")
        print(f"  Stderr: {e.stderr.strip()}")
        return False
    except FileNotFoundError:
        print("‚úó L·ªói: L·ªánh 'netsh' kh√¥ng t√¨m th·∫•y. C√≥ th·ªÉ kh√¥ng ph·∫£i Windows ho·∫∑c PATH sai.")
        return False

def set_system_proxy(proxy_address="127.0.0.1:8899"):
    print(f"ƒêang thi·∫øt l·∫≠p proxy h·ªá th·ªëng th√†nh {proxy_address}...")
    success = run_netsh_command(["netsh", "winhttp", "set", "proxy", proxy_address])
    if success:
        print("‚úì ƒê√£ thi·∫øt l·∫≠p proxy h·ªá th·ªëng.")
    else:
        print("‚úó Kh√¥ng th·ªÉ thi·∫øt l·∫≠p proxy h·ªá th·ªëng.")
    return success

def reset_system_proxy():
    print("ƒêang ƒë·∫∑t l·∫°i proxy h·ªá th·ªëng...")
    success = run_netsh_command(["netsh", "winhttp", "reset", "proxy"])
    if success:
        print("‚úì ƒê√£ ƒë·∫∑t l·∫°i proxy h·ªá th·ªëng.")
    else:
        print("‚úó Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i proxy h·ªá th·ªëng.")
    return success

def get_active_network_interfaces():
    interfaces = []
    try:
        # L·ªánh ƒë·ªÉ l·∫•y th√¥ng tin interface chi ti·∫øt h∆°n
        result = subprocess.run(["netsh", "interface", "ipv4", "show", "config"], check=True, capture_output=True, text=True, shell=True)
        output = result.stdout
        
        current_interface = None
        for line in output.splitlines():
            if "C·∫•u h√¨nh cho giao di·ªán" in line or "Configuration for interface" in line: # D√≤ng b·∫Øt ƒë·∫ßu c·ªßa m·ªôt interface m·ªõi
                match = re.search(r"C·∫•u h√¨nh cho giao di·ªán "(.+)"", line) or re.search(r"Configuration for interface "(.+)"", line)
                if match:
                    current_interface = match.group(1).strip()
                    if current_interface and current_interface not in ['Loopback Pseudo-Interface 1']:
                        interfaces.append(current_interface)
            # C√≥ th·ªÉ th√™m logic ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i "Connected" ho·∫∑c "Enabled" n·∫øu c·∫ßn
            # Tuy nhi√™n, "show config" th∆∞·ªùng ch·ªâ hi·ªÉn th·ªã c√°c interface ƒëang c·∫•u h√¨nh IP
    except Exception as e:
        print(f"‚úó L·ªói khi l·∫•y danh s√°ch card m·∫°ng: {e}")
    # ƒê√¥i khi netsh interface show interface cung c·∫•p th√¥ng tin "Connected" r√µ r√†ng h∆°n
    try:
        result = subprocess.run(["netsh", "interface", "show", "interface"], check=True, capture_output=True, text=True, shell=True)
        output = result.stdout
        for line in output.splitlines():
            if "Connected" in line or "Enabled" in line:
                match = re.search(r'\s{2,}\w+\s{2,}\w+\s{2,}\w+\s{2,}(.+)$', line)
                if match:
                    interface_name = match.group(1).strip()
                    if interface_name and interface_name not in ['Loopback Pseudo-Interface 1'] and interface_name not in interfaces:
                         interfaces.append(interface_name)
    except Exception as e:
        print(f"‚úó L·ªói khi l·∫•y danh s√°ch card m·∫°ng t·ª´ 'show interface': {e}")

    return list(set(interfaces)) # ƒê·∫£m b·∫£o kh√¥ng c√≥ tr√πng l·∫∑p


def set_system_dns(interface_name, dns_server="127.0.0.1"):
    print(f"ƒêang thi·∫øt l·∫≠p DNS cho adapter '{interface_name}' th√†nh {dns_server}...")
    success = run_netsh_command(["netsh", "interface", "ipv4", "set", "dns", interface_name, "static", dns_server, "primary"])
    if success:
        print(f"‚úì ƒê√£ thi·∫øt l·∫≠p DNS ch√≠nh cho '{interface_name}'.")
    else:
        print(f"‚úó Kh√¥ng th·ªÉ thi·∫øt l·∫≠p DNS ch√≠nh cho '{interface_name}'.")
    return success

def reset_system_dns(interface_name):
    print(f"ƒêang ƒë·∫∑t l·∫°i DNS cho adapter '{interface_name}' v·ªÅ DHCP...")
    success = run_netsh_command(["netsh", "interface", "ipv4", "set", "dns", interface_name, "dhcp"])
    if success:
        print(f"‚úì ƒê√£ ƒë·∫∑t l·∫°i DNS cho '{interface_name}'.")
    else:
        print(f"‚úó Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i DNS cho '{interface_name}'.")
    return success
